{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Pandas: Indexes and Filtering","provenance":[{"file_id":"173yr8AmX1X7FoeGy2A1jnB6pKu1ZDpL-","timestamp":1609635655491},{"file_id":"1V8s6loSa6ElmEJe3S3RqqOI0AgAQX4yW","timestamp":1606393864327}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"Zxl281ROjclR"},"source":["import pandas as pd"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3WbfjufrlVw7"},"source":["# Downloading and Loading Datasets\n","Downloading all the required csv files and loading the data into the dataframes"]},{"cell_type":"code","metadata":{"id":"Pw5r5G-xldS6"},"source":["# eCommerce Dataset\n","!wget https://nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com/otg_prod/media/Tech_4.0/AI_ML/Datasets/shopping_data_v2.csv\n","\n","shopping_df = pd.read_csv('shopping_data_v2.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LIYeqaK_M8wZ"},"source":["# Covid Dataset\n","!wget https://nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com/otg_prod/media/Tech_4.0/AI_ML/Datasets/italy-covid-daywise.csv\n","\n","covid_df = pd.read_csv('italy-covid-daywise.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pNKwxH46M8lC"},"source":["# Stackoverflow Survey Dataset\n","!wget https://nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com/otg_prod/media/Tech_4.0/AI_ML/Datasets/survey_results_public.csv\n","\n","survey_df = pd.read_csv('survey_results_public.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2PuJZuRAM8Za"},"source":["# Film Dataset\n","!wget https://nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com/otg_prod/media/Tech_4.0/AI_ML/Datasets/film.csv\n"," \n","films_df = pd.read_csv('film.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"twOlZ1Wg7s0x"},"source":["# Display Options"]},{"cell_type":"code","metadata":{"id":"-IKLqaw_JtHL"},"source":["shopping_df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9iUgNtUk8ipW"},"source":["pd.set_option('display.max_rows', 8)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"149Rhr_-J6LG"},"source":["shopping_df\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"D4PrIhHJCufp"},"source":["**To display more than 10 rows when the dataframe is truncated, set the `min_rows` option to be greater than 10.**"]},{"cell_type":"code","metadata":{"id":"a1NMbF7HB01Q"},"source":["pd.set_option('display.min_rows', 25)\n","pd.set_option('display.max_rows', 30)\n","shopping_df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kge-8co29gzw"},"source":["pd.set_option('display.max_columns', 2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AUFbbt2g9UTU"},"source":["shopping_df"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gSo4IWS2C-8O"},"source":["**To display all the rows, set max_rows to None.**"]},{"cell_type":"code","metadata":{"id":"XvBM2xN8-ru9"},"source":["pd.set_option(\"display.max_rows\", None)\n","shopping_df"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"li4K8kPYG8UZ"},"source":["**To reset all the display options**"]},{"cell_type":"code","metadata":{"id":"UBV9KA9S_bAg"},"source":["pd.reset_option('display')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-ICINaZC_RsM"},"source":["shopping_df"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sXnugr2lllQM"},"source":["# Index\n","\n","\n","*   An index contains **identifiers for rows**. These are usually unique, but pandas doesn't enforce the uniqueness.\n","*   Each identifier is also called a **label**.\n","\n"]},{"cell_type":"code","metadata":{"id":"QOWFnqWGzmW6"},"source":["print(shopping_df.index)\n","\n","print(shopping_df.index.name)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lTmDspATTuh6"},"source":["## Changing the Index"]},{"cell_type":"markdown","metadata":{"id":"47Z7q2sgj9WR"},"source":["### pd.DataFrame.set_index\n","* **`pd.DataFrame.set_index(keys, inplace=False)`**\n","  * Set the DataFrame index (row labels) using one or more existing columns or arrays (of appropriate length).\n","  * The index can replace the existing index or expand on it. "]},{"cell_type":"code","metadata":{"id":"UbNtx9H6z33b"},"source":["shopping_df.columns"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oTnTw70FnM75"},"source":["shopping_df.set_index('Order ID')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5YgLyxxjtTNA"},"source":["shopping_df"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oyWgxkf7rcDc"},"source":["**Create a Multi-Index using the columns `Order ID` and `Product`:**"]},{"cell_type":"code","metadata":{"id":"KuBGAw1NrsKz"},"source":["shopping_df = pd.read_csv('shopping_data_v2.csv')\n","\n","shopping_df.set_index(['Order ID', 'Product'])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LfuFXsXMtXN3"},"source":["**Use `inplace = True` to modify the DataFrame in place.**"]},{"cell_type":"code","metadata":{"id":"7c2pV73Etm1f"},"source":["shopping_df.set_index('Order ID', inplace = True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"COmSk2gyt6Lm"},"source":["shopping_df"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CV53jXL-x4OS"},"source":["### Setting the index while reading the csv file"]},{"cell_type":"code","metadata":{"id":"o2oYYOlnzEKs"},"source":["shopping_df = pd.read_csv('shopping_data_v2.csv', index_col = 'Order ID')\n","shopping_df"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5mMFHsoJTMj6"},"source":["### pd.DataFrame.reset_index\n","\n","* `pd.DataFrame.reset_index(drop=False, inplace=False)`\n","  * Returns a DataFrame with the `new index` or `None` if `inplace=True`.\n","  * Reset the index of the DataFrame, and use the default one instead."]},{"cell_type":"code","metadata":{"id":"eI30bI69pXkP"},"source":["shopping_df.reset_index()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"B9WymMsrtsqp"},"source":["**We can use the `drop` parameter to avoid the old index being added as a column:**\n"]},{"cell_type":"code","metadata":{"id":"KF4EAxZFtrvp"},"source":["shopping_df.reset_index(drop=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PWGR2qO0qGj6"},"source":["shopping_df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aW8aQJ7-r7_d"},"source":["shopping_df.reset_index(inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gFxxJhB6sA-r"},"source":["shopping_df"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T8imYu5lTgby"},"source":["## Accessing data with updated Index: `loc`"]},{"cell_type":"code","metadata":{"id":"GX7vwJpXVNE9"},"source":["shopping_df.set_index(\"Order ID\", inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cSRok-ynO8u4"},"source":["shopping_df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"h33yKtCteQSY"},"source":["# The following code throws error\n","\n","shopping_df.loc[2, 'Product': 'Order Date']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2akRlLxXVQJ2"},"source":["**Changing the index changes the way we access the data with `loc`**"]},{"cell_type":"code","metadata":{"id":"AULmBJY5VL9s"},"source":["shopping_df.set_index('Order ID', inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s_bPcOWhVsnm"},"source":["#Raises an error\n","shopping_df.loc[2, 'Product': 'Order Date']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"H0lP3QEAVtSc"},"source":["shopping_df.loc[176560, 'Product': 'Order Date']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rQNeTEK-UKVl"},"source":["## Using methods based on Index"]},{"cell_type":"markdown","metadata":{"id":"iczNN3UWwu5U"},"source":["### pd.DataFrame.sort_index\n","\n","* `pd.DataFrame.sort_index(axis=0, ascending=True, inplace=False, key=None)`\n","  * Returns a new DataFrame sorted by the label if `inplace=False`, otherwise updates the original DataFrame and returns None."]},{"cell_type":"code","metadata":{"id":"jvmRcRQHxbhX"},"source":["shopping_df.sort_index()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SAh1eO-2xp4l"},"source":["* By default, it sorts in ascending order, to sort in descending order, use `ascending=False`"]},{"cell_type":"code","metadata":{"id":"hrALbNhmxyKK"},"source":["shopping_df.sort_index(ascending=False)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eLXww2zDSpmx"},"source":["* A `key` function can be specified which is applied to the index before sorting."]},{"cell_type":"code","metadata":{"id":"BeA4IONSSxMf"},"source":["sort_df = pd.DataFrame({\"int_values\": [1, 2, 3, 4]}, index=['a', 'E', 'F', 'g'])\n","sort_df.sort_index(key=lambda x: x.str.lower())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7e6WYE6qs9Lx"},"source":["### pd.DataFrame.first_valid_index\n","\n","* Returns the `index` of the first non-NA/null value."]},{"cell_type":"code","metadata":{"id":"ghjtFy9Du448"},"source":["import numpy as np\n","df1 = pd.DataFrame({\n","    \"name\":[np.nan, \"Sonu\", \"Raj\"],\n","    \"place\":[np.nan, \"Bangalore\", \"Vijayawada\"]\n","})\n","df1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wvk5vPPavc_V"},"source":["df1.first_valid_index()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wCksK-CXlwsE"},"source":["# Filtering"]},{"cell_type":"markdown","metadata":{"id":"_aHbpsmCl0Pi"},"source":["## Creating Masks"]},{"cell_type":"code","metadata":{"id":"i8gIqyu3QtQI"},"source":["shopping_df['Price Each']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2RMdhZpb0L7i"},"source":["price_filter = shopping_df['Price Each'] > 100\n","price_filter"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NAb3orq_1s0z"},"source":["- The boolean expression returns a series containing `True` and `False` boolean values.\n","- You can use this series to select a subset of rows from the original dataframe, corresponding to the `True` values in the series."]},{"cell_type":"code","metadata":{"id":"r13ZP4wW1EFM"},"source":["shopping_df[price_filter]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1bImsdTc33NL"},"source":["shopping_df.loc[price_filter, 'Price Each']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"i8cO6xjQ4IrK"},"source":["shopping_df.loc[price_filter, 'Price Each':'Purchase Address']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yHn6zTRBl5uo"},"source":["## Using Logical and Relational Operators"]},{"cell_type":"code","metadata":{"id":"SSLjdBsf4hRY"},"source":["price_range_filter = (shopping_df['Price Each'] > 10) & (shopping_df['Price Each'] < 20)\n","shopping_df.loc[price_range_filter]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TlZDIrcX5KX5"},"source":["**Excluding the rows which satisfy the given condition**"]},{"cell_type":"code","metadata":{"id":"AXAAKE0F4214"},"source":["neg_filter = (shopping_df['Price Each'] >= 10)\n","shopping_df[~neg_filter]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yPEqpwqq5Zlq"},"source":["## Using `str` methods"]},{"cell_type":"code","metadata":{"id":"SVmA0nMaSCeT"},"source":["shopping_df['Product']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vGHh4-Ov5dKc"},"source":["filter = shopping_df['Product'].str.contains('Headphones')\n","shopping_df[filter]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gUCgECHV51fJ"},"source":["filter = shopping_df['Product'].str.endswith('Cable')\n","shopping_df[filter]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hEhHBhb76WoE"},"source":["## pd.DataFrame.query\n","\n","* `pd.DataFrame.query(expr, inplace=False, **kwargs)`\n","  * Returns a DataFrame resulting from the provided query expression."]},{"cell_type":"code","metadata":{"id":"gNSi074ZDfBF"},"source":["pd.DataFrame.query?"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Po5HQ8sH6yKL"},"source":["df = pd.DataFrame({'A': [1, 6],\n","\n","                   'B': [10, 3],\n","\n","                   'C': [10, 5]})\n","\n","df.query('B == C & A < B')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RGoXBFO49dH2"},"source":["The above expression is also equivalent to:"]},{"cell_type":"code","metadata":{"id":"4rBPstnW9QQY"},"source":["df[(df.B == df.C) & (df.A < df.B)]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bakJjjilmWl8"},"source":["\n","\n","---\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"lqtW00tvmeQv"},"source":["# Try It Yourself\n","\n","For the following questions, use the **covid** dataset.\n","\n","0.   Load the dataset into a dataframe using `read_csv`\n","1.   Make the `date` column as the index.\n","2.   Sort the records in the dataset based on the `date` column.\n","3.   Find out on which days more than 1000 cases were reported.\n","4.   Fetch the `new_cases` and `new_tests` reported in the month of June.\n","5.   Find the first row in which valid `new_tests` were reported.\n","\n","\n","For the following questions, use the **film** dataset\n","\n","6.  Make the '`year` and `title` as indices.\n","7.  Fetch the films where the `actor` name contains `Jasen` and the `popularity` is greater than 50.\n","\n"]}]}